from pydantic import BaseModel, Field
from typing import List, Optional


class QuestionRequest(BaseModel):
    """Request model for asking a question about a PDF document."""
    question: str = Field(..., description="The question to ask about the PDF content")
    pdf_id: str = Field(..., description="ID of the previously uploaded PDF")


class ChunkInfo(BaseModel):
    """Information about a text chunk from a PDF."""
    text: str = Field(..., description="Text content of the chunk")
    page_number: int = Field(..., description="Page number where this chunk appears")
    score: float = Field(..., description="Relevance score of this chunk to the query")


class AnswerResponse(BaseModel):
    """Response model for a PDF question."""
    answer: str = Field(..., description="The answer generated by the LLM")
    source_chunks: List[ChunkInfo] = Field(
        ..., description="Source chunks used to generate the answer"
    )
    processing_time: float = Field(
        ..., description="Time taken to process the question in seconds"
    )


class PDFUploadResponse(BaseModel):
    """Response model for PDF upload endpoint."""
    pdf_id: str = Field(..., description="Unique ID assigned to the uploaded PDF")
    filename: str = Field(..., description="Name of the uploaded PDF file")
    num_pages: int = Field(..., description="Number of pages in the PDF")
    num_chunks: int = Field(..., description="Number of text chunks extracted")
    processing_time: float = Field(
        ..., description="Time taken to process the PDF in seconds"
    )


class ErrorResponse(BaseModel):
    """Model for API error responses."""
    detail: str = Field(..., description="Error message")